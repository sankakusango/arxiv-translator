<!doctype html>
<html lang="ja">
<head>
  <meta charset="utf-8">
  <title>arXiv翻訳</title>
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
  <!-- 外部CSS -->
  <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
  <!-- Font Awesomeの読み込み（まだ読み込んでいない場合） -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>

<div class="container my-4">
  <h1 class="mb-4">arXiv翻訳</h1>

  <!-- arXiv ID 入力フォーム -->
  <form method="post" action="/translate" class="mb-4">
    <div class="input-group">
      <input type="text" name="arxiv_id" id="arxiv_id" class="form-control" placeholder="例: 1234.5678" required>
      <button type="submit" class="btn btn-primary">翻訳する</button>
    </div>
  </form>

  <!-- job_id が存在する場合のみ、進捗やログを表示する -->
  {% if job_id %}
    <div class="mb-3" id="statusArea">
      <!-- 進捗状況を表示（動的に変更） -->
      <p>翻訳を待機しています...</p>
    </div>

    <div id="result">
      <!-- PDF のリンクなどの結果表示（動的に更新） -->
    </div>

    <!-- ログ表示部分（折りたたみ） -->
    <div class="card mt-4">
      <div class="card-header">
        <button class="btn btn-link" type="button" data-bs-toggle="collapse" data-bs-target="#logCollapse" aria-expanded="false" aria-controls="logCollapse">
          ログを表示 / 非表示
        </button>
      </div>
      <div id="logCollapse" class="collapse">
        <div class="card-body" id="log">
          <!-- ログの行を JavaScript で append していく -->
        </div>
      </div>
    </div>
  {% endif %}
</div>

<!-- Bootstrap JS (依存の Popper.js を含むバンドル) -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

{% if job_id %}
<script>
  // Django テンプレート変数の受け取り
  const jobId = "{{ job_id }}";
  const statusArea = document.getElementById("statusArea");
  const logDiv = document.getElementById("log");
  const resultDiv = document.getElementById("result");

  let pdfLink = null;     // PDFのリンクを保存
  let hasError = false;   // エラーが発生したかどうか

  // SSE でサーバーからログを受け取る
  const evtSource = new EventSource("/logs?job_id=" + jobId);

  evtSource.onmessage = function(e) {
    const msg = e.data.trim();
    if (!msg) return;

    // ログを画面下部に追加
    const p = document.createElement("p");
    p.innerHTML = msg;
    logDiv.appendChild(p);
    logDiv.scrollTop = logDiv.scrollHeight; // 最新行へスクロール

    // PDFリンクを含む行があればキャプチャ
    const match = msg.match(/PDF_LINK:\s*(\/\S+)/);
    if (match) {
      pdfLink = match[1].trim();
    }

    // エラーを検知
    if (msg.toLowerCase().includes("error") || msg.toLowerCase().includes("fail")) {
      hasError = true;
    }

    // ログメッセージの内容によってステータス表示を更新
    if (msg.includes("Queue acquired")) {
      statusArea.innerHTML = `<p>翻訳準備中 (arXiv ID: {{ arxiv_id }})</p>`;
    } else if (msg.includes("Queue waiting")) {
      statusArea.innerHTML = "<p>翻訳待機中 (arXiv ID: {{ arxiv_id }})...</p>";
    } else if (msg.includes("翻訳用のLLMとして")) {
      statusArea.innerHTML = "<p>翻訳準備完了</p>";
    } else if (msg.includes("processing file")) {
      statusArea.innerHTML = "<p>翻訳開始</p>";
    } else if (msg.includes("翻訳中")) {
        // 正規表現で "(3/5)" の部分を抽出
        const match = msg.match(/翻訳中 (\d+)\/(\d+)/);
        
        if (match) {
            const current = match[1]; // 3
            const total = match[2]; // 5
            statusArea.innerHTML = `<p>翻訳中 (${current}/${total}) 時間がかかります...</p>`;
        } else {
            statusArea.innerHTML = "<p>翻訳中</p>"; // フォールバック
        }
    } else if (msg.includes("翻訳完了")) {
      statusArea.innerHTML = "<p>PDFをコンパイル中...</p>";
    } else if (msg.includes("コンパイル試行中 ")) {
        // 正規表現で "(3/5)" の部分を抽出
        const match = msg.match(/コンパイル試行中 (\d+)\/(\d+)/);
        
        if (match) {
            const current = match[1]; // 3
            const total = match[2]; // 5
            statusArea.innerHTML = `<p>コンパイル試行中 (${current}/${total})</p>`;
        } else {
            statusArea.innerHTML = "<p>コンパイル試行中</p>"; // フォールバック
        }
    } else if (msg.includes("コンパイル成功")) {
      statusArea.innerHTML = "<p>翻訳が完了しました。</p>";
    } else if (msg.includes("arxiv_idの抽出失敗")) {
        const match = msg.match(/`([^`]+)`/);
        if (match) {
            statusArea.innerHTML = `<p>arXivのID抽出失敗 from ${match[1]}</p>`;
        } else {
            statusArea.innerHTML = "<p>arXivのID抽出失敗</p>"; // フォールバック
        }
    }

    // 最終的にジョブ完了を示すメッセージが来たら SSE を閉じる
    if (msg.includes("release")) {
      evtSource.close();

      // 成否の判定
      if (hasError) {
        if (pdfLink) {
          // PDF はあるがエラーが出ている → 部分的に失敗
          statusArea.innerHTML = "<p>翻訳は部分的に失敗しました。生成されたPDFに不備がある可能性があります。</p>";
        } else {
          // PDF が無い → 完全に失敗
          statusArea.innerHTML = "<p>翻訳に失敗しました。PDFは生成されていません。</p>";
        }
      } else {
        statusArea.innerHTML = "<p>翻訳が正常に完了しました。</p>";
      }

      // PDF があるならリンクを表示
      if (pdfLink) {
        resultDiv.innerHTML = `
          <p>PDFが生成されました：
            <button type="button" id="downloadBtn" class="btn btn-success">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-download" viewBox="0 0 16 16">
                  <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5"></path>
                  <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708z"></path>
                </svg>
                ダウンロード
            </button>
            <a href="${pdfLink}" class="text-decoration-none" target="_blank"> PDFを表示
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-window-plus" viewBox="0 0 16 16">
                  <path d="M2.5 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1M4 5a.5.5 0 1 0 0-1 .5.5 0 0 0 0 1m2-.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0"></path>
                  <path d="M0 4a2 2 0 0 1 2-2h11a2 2 0 0 1 2 2v4a.5.5 0 0 1-1 0V7H1v5a1 1 0 0 0 1 1h5.5a.5.5 0 0 1 0 1H2a2 2 0 0 1-2-2zm1 2h13V4a1 1 0 0 0-1-1H2a1 1 0 0 0-1 1z"></path>
                  <path d="M16 12.5a3.5 3.5 0 1 1-7 0 3.5 3.5 0 0 1 7 0m-3.5-2a.5.5 0 0 0-.5.5v1h-1a.5.5 0 0 0 0 1h1v1a.5.5 0 0 0 1 0v-1h1a.5.5 0 0 0 0-1h-1v-1a.5.5 0 0 0-.5-.5"></path>
                </svg>
            </a>
          </p>
        `;

        // ボタンがクリックされたとき、ダウンロード用のリンクを作成してクリックをシミュレートする
        document.getElementById('downloadBtn').addEventListener('click', function() {
          const link = document.createElement('a');
          link.href = pdfLink;
          link.download = ''; // 任意でファイル名を指定可能
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        });
      }
    }
  };
</script>
{% endif %}

</body>
</html>
